from pydantic import BaseModel, Field, validator
from typing import Optional, Dict, Any, List
from datetime import datetime
import re


class WhatsAppLinkRequest(BaseModel):
    """Request schema for linking WhatsApp account"""
    token: str = Field(..., min_length=1, max_length=255, description="Link token generated by WhatsApp bot")


class WhatsAppLinkResponse(BaseModel):
    """Response schema for WhatsApp account linking"""
    success: bool = Field(..., description="Whether the linking was successful")
    message: str = Field(..., description="Human-readable message about the operation")
    whatsapp_phone: Optional[str] = Field(None, description="WhatsApp phone number")
    whatsapp_name: Optional[str] = Field(None, description="WhatsApp display name")
    user_name: Optional[str] = Field(None, description="Platform user's full name")


class WhatsAppWebhookMessage(BaseModel):
    """WhatsApp webhook message schema"""
    id: str = Field(..., description="Message ID")
    from_: str = Field(..., alias="from", description="Sender phone number")
    timestamp: str = Field(..., description="Message timestamp")
    text: Optional[Dict[str, str]] = Field(None, description="Text message content")
    type: str = Field(..., description="Message type (text, image, document, etc.)")
    context: Optional[Dict[str, Any]] = Field(None, description="Message context (replies, etc.)")


class WhatsAppWebhookContact(BaseModel):
    """WhatsApp webhook contact schema"""
    profile: Dict[str, str] = Field(..., description="Contact profile information")
    wa_id: str = Field(..., description="WhatsApp ID (phone number)")


class WhatsAppWebhookValue(BaseModel):
    """WhatsApp webhook value schema"""
    messaging_product: str = Field(..., description="Always 'whatsapp'")
    metadata: Dict[str, Any] = Field(..., description="Webhook metadata")
    contacts: Optional[List[WhatsAppWebhookContact]] = Field(None, description="Contact information")
    messages: Optional[List[WhatsAppWebhookMessage]] = Field(None, description="Incoming messages")
    statuses: Optional[List[Dict[str, Any]]] = Field(None, description="Message statuses")


class WhatsAppWebhookEntry(BaseModel):
    """WhatsApp webhook entry schema"""
    id: str = Field(..., description="WhatsApp Business Account ID")
    changes: List[Dict[str, Any]] = Field(..., description="Webhook changes")


class WhatsAppWebhookData(BaseModel):
    """WhatsApp webhook data schema"""
    object: str = Field(..., description="Always 'whatsapp_business_account'")
    entry: List[WhatsAppWebhookEntry] = Field(..., description="Webhook entries")


class WhatsAppUserCreate(BaseModel):
    """Schema for creating WhatsApp user"""
    whatsapp_phone: str = Field(..., min_length=1, max_length=20, description="WhatsApp phone number")
    whatsapp_name: Optional[str] = Field(None, max_length=255, description="WhatsApp display name")
    whatsapp_profile_name: Optional[str] = Field(None, max_length=255, description="WhatsApp profile name")
    
    @validator('whatsapp_phone')
    def validate_phone(cls, v):
        # Basic phone number validation (digits only, 10-15 chars)
        phone_pattern = re.compile(r'^\+?[1-9]\d{9,14}$')
        if not phone_pattern.match(v):
            raise ValueError('Invalid phone number format')
        return v


class WhatsAppUserResponse(BaseModel):
    """Response schema for WhatsApp user"""
    id: str = Field(..., description="User ID")
    whatsapp_phone: str = Field(..., description="WhatsApp phone number")
    whatsapp_name: Optional[str] = Field(None, description="WhatsApp display name")
    whatsapp_profile_name: Optional[str] = Field(None, description="WhatsApp profile name")
    is_linked: bool = Field(..., description="Whether account is linked")
    linked_at: Optional[datetime] = Field(None, description="When account was linked")
    
    class Config:
        from_attributes = True


class WhatsAppLinkStatusResponse(BaseModel):
    """Response schema for WhatsApp link status"""
    is_linked: bool = Field(..., description="Whether account is linked")
    whatsapp_phone: Optional[str] = Field(None, description="WhatsApp phone number")
    whatsapp_name: Optional[str] = Field(None, description="WhatsApp display name")
    linked_at: Optional[datetime] = Field(None, description="When account was linked")


class WhatsAppSendMessageRequest(BaseModel):
    """Request schema for sending WhatsApp message"""
    to: str = Field(..., description="Recipient phone number")
    message_type: str = Field("text", description="Message type (text, template, etc.)")
    text: Optional[str] = Field(None, description="Text message content")
    template_name: Optional[str] = Field(None, description="Template name for template messages")
    template_language: Optional[str] = Field("en", description="Template language code")
    template_components: Optional[List[Dict[str, Any]]] = Field(None, description="Template components")


class WhatsAppSendMessageResponse(BaseModel):
    """Response schema for sending WhatsApp message"""
    success: bool = Field(..., description="Whether message was sent successfully")
    message_id: Optional[str] = Field(None, description="WhatsApp message ID")
    error: Optional[str] = Field(None, description="Error message if failed")


class WhatsAppVerificationRequest(BaseModel):
    """Schema for WhatsApp webhook verification"""
    hub_mode: str = Field(..., alias="hub.mode")
    hub_challenge: str = Field(..., alias="hub.challenge") 
    hub_verify_token: str = Field(..., alias="hub.verify_token")
    
    class Config:
        populate_by_name = True