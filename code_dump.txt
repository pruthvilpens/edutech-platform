### Project Tree
.
├── AI
│   ├── Build.md
│   ├── Features.md
│   └── Rules.md
├── README.md
├── backend
│   ├── gunicorn.conf.py
│   ├── pyproject.toml
│   ├── requirements-dev.txt
│   ├── requirements.txt
│   ├── src
│   │   ├── __init__.py
│   │   ├── api
│   │   │   ├── __init__.py
│   │   │   └── telegram.py
│   │   ├── core
│   │   │   ├── __init__.py
│   │   │   └── config.py
│   │   ├── edutech_platform_backend.egg-info
│   │   │   ├── PKG-INFO
│   │   │   ├── SOURCES.txt
│   │   │   ├── dependency_links.txt
│   │   │   └── top_level.txt
│   │   ├── main.py
│   │   ├── middleware
│   │   │   ├── __init__.py
│   │   │   └── error_handler.py
│   │   ├── models
│   │   │   ├── __init__.py
│   │   │   ├── base.py
│   │   │   ├── telegram.py
│   │   │   └── user.py
│   │   ├── schemas
│   │   │   ├── __init__.py
│   │   │   └── telegram.py
│   │   ├── services
│   │   │   ├── __init__.py
│   │   │   └── telegram_bot.py
│   │   └── utils
│   │       ├── __init__.py
│   │       ├── auth.py
│   │       ├── database.py
│   │       └── rate_limiter.py
│   └── start.sh
├── code_dump.sh
├── code_dump.txt
├── database
│   ├── init.sql
│   └── migrations
│       ├── 002_telegram_integration.sql
│       └── database
├── docker-compose.yml
├── docs
├── frontend
│   ├── README.md
│   ├── eslint.config.mjs
│   ├── next-env.d.ts
│   ├── next.config.ts
│   ├── package.json
│   ├── pnpm-lock.yaml
│   ├── postcss.config.mjs
│   ├── public
│   │   ├── file.svg
│   │   ├── globe.svg
│   │   ├── next.svg
│   │   ├── vercel.svg
│   │   └── window.svg
│   ├── src
│   │   ├── app
│   │   │   ├── (auth)
│   │   │   │   ├── layout.tsx
│   │   │   │   ├── login
│   │   │   │   │   └── page.tsx
│   │   │   │   └── signup
│   │   │   │       └── page.tsx
│   │   │   ├── (dashboard)
│   │   │   │   ├── admin
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── instructor
│   │   │   │   │   └── page.tsx
│   │   │   │   └── student
│   │   │   │       └── page.tsx
│   │   │   ├── api
│   │   │   │   └── auth
│   │   │   │       ├── [...nextauth]
│   │   │   │       │   └── route.ts
│   │   │   │       └── signup
│   │   │   │           └── route.ts
│   │   │   ├── dashboard
│   │   │   │   ├── admin
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── instructor
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── layout.tsx
│   │   │   │   ├── page.tsx
│   │   │   │   ├── settings
│   │   │   │   │   └── page.tsx
│   │   │   │   └── student
│   │   │   │       └── page.tsx
│   │   │   ├── favicon.ico
│   │   │   ├── layout.tsx
│   │   │   └── page.tsx
│   │   ├── components
│   │   │   ├── features
│   │   │   │   └── TelegramIntegration.tsx
│   │   │   ├── index.ts
│   │   │   ├── layouts
│   │   │   │   ├── DashboardLayout.tsx
│   │   │   │   ├── Footer.tsx
│   │   │   │   ├── Header.tsx
│   │   │   │   └── SideNav.tsx
│   │   │   ├── providers
│   │   │   │   └── SessionProvider.tsx
│   │   │   └── ui
│   │   ├── globals.css
│   │   ├── lib
│   │   │   ├── api
│   │   │   ├── auth.ts
│   │   │   ├── config
│   │   │   ├── hooks
│   │   │   ├── index.ts
│   │   │   ├── rbac.ts
│   │   │   └── utils
│   │   ├── middleware.ts
│   │   └── types
│   │       ├── index.ts
│   │       └── next-auth.d.ts
│   └── tsconfig.json
├── shared
│   └── types
│       ├── index.ts
│       └── package.json
├── test_bot.py
├── test_bot_with_logs.py
└── test_production.py

49 directories, 87 files


### File Contents



--- FILE: ./.claude/settings.local.json ---

{
  "permissions": {
    "allow": [
      "Bash(sudo lsof:*)",
      "Bash(lsof:*)",
      "Bash(ss:*)",
      "Bash(pnpm add:*)"
    ],
    "deny": []
  }
}

--- FILE: ./.env ---

# Application
DEBUG=true
SECRET_KEY=edutech-super-secret-key-2024-change-in-production
DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/edutech_db

# Hasura
HASURA_GRAPHQL_ENDPOINT=http://localhost:8081/v1/graphql
HASURA_ADMIN_SECRET=myadminsecretkey

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=8294482453:AAGbB-_tQoib0nF57F4kW7-pSkGAXM3-_3E
TELEGRAM_WEBHOOK_URL=
TELEGRAM_WEBHOOK_SECRET=telegram-webhook-secret-2024

# CORS
CORS_ORIGINS=["http://localhost:3000", "https://yourdomain.com"]

--- FILE: ./.env.example ---

# Application
DEBUG=true
SECRET_KEY=your-secret-key-here
DATABASE_URL=postgresql+asyncpg://username:password@localhost:5432/edutech_db

# Hasura
HASURA_GRAPHQL_ENDPOINT=http://localhost:8080/v1/graphql
HASURA_ADMIN_SECRET=myadminsecretkey

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=your-telegram-bot-token-here
TELEGRAM_WEBHOOK_URL=https://yourdomain.com/api/telegram/webhook
TELEGRAM_WEBHOOK_SECRET=your-webhook-secret-token

# CORS
CORS_ORIGINS=["http://localhost:3000", "https://yourdomain.com"]

--- FILE: ./.env.production ---

# Production Environment Configuration

# Application
DEBUG=false
ENVIRONMENT=production
SECRET_KEY=CHANGE-THIS-TO-A-SECURE-RANDOM-STRING-IN-PRODUCTION
DATABASE_URL=postgresql+asyncpg://username:password@localhost:5432/edutech_db

# Server
HOST=0.0.0.0
PORT=8000
WORKERS=4

# Database
DATABASE_POOL_SIZE=20
DATABASE_MAX_OVERFLOW=30

# Hasura
HASURA_GRAPHQL_ENDPOINT=http://localhost:8081/v1/graphql
HASURA_ADMIN_SECRET=CHANGE-THIS-IN-PRODUCTION

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=your-telegram-bot-token-here
TELEGRAM_WEBHOOK_URL=https://yourdomain.com/api/telegram/webhook
TELEGRAM_WEBHOOK_SECRET=CHANGE-THIS-IN-PRODUCTION

# Security
ALLOWED_HOSTS=["yourdomain.com", "api.yourdomain.com"]

# CORS - Update with your actual domains
CORS_ORIGINS=["https://yourdomain.com", "https://app.yourdomain.com"]

# Logging
LOG_LEVEL=INFO
LOG_FORMAT=json

# Monitoring
ENABLE_METRICS=true
METRICS_PORT=9090

# Rate Limiting
RATE_LIMIT_PER_MINUTE=100

--- FILE: ./backend/.env ---

# Application
DEBUG=true

# Database
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/edutech_db

# Hasura
HASURA_GRAPHQL_ENDPOINT=http://localhost:8081/v1/graphql
HASURA_ADMIN_SECRET=myadminsecretkey

# JWT
SECRET_KEY=e8a3b2c1d0f9e8d7c6b5a4b3c2d1e0f9a8b7c6d5e4f3a2b1c0d9e8f7a6b5c4d3
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS
CORS_ORIGINS=["http://localhost:3000"]


--- FILE: ./backend/.env.example ---

# Application
DEBUG=true

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/edutech_db

# Hasura
HASURA_GRAPHQL_ENDPOINT=http://localhost:8080/v1/graphql
HASURA_ADMIN_SECRET=your_hasura_admin_secret

# JWT
SECRET_KEY=your_secret_key_here_use_openssl_rand_hex_32
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS
CORS_ORIGINS=["http://localhost:3000"]


--- FILE: ./backend/.flake8 ---

[flake8]
max-line-length = 100
extend-ignore = E203, W503
exclude = 
    .git,
    __pycache__,
    venv,
    .venv,
    build,
    dist


--- FILE: ./backend/gunicorn.conf.py ---

import os
from core.config import settings

# Server socket
bind = f"{settings.HOST}:{settings.PORT}"
backlog = 2048

# Worker processes
workers = settings.WORKERS
worker_class = "uvicorn.workers.UvicornWorker"
worker_connections = 1000
timeout = 30
keepalive = 2

# Restart workers after this many requests
max_requests = 1000
max_requests_jitter = 50

# Logging
accesslog = "-"
errorlog = "-"
loglevel = settings.LOG_LEVEL.lower()
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s"'

# Process naming
proc_name = "edutech-api"

# Server mechanics
preload_app = True
daemon = False
pidfile = "/tmp/gunicorn.pid"
user = None
group = None
tmp_upload_dir = None

# SSL (if needed)
# keyfile = "/path/to/keyfile"
# certfile = "/path/to/certfile"

--- FILE: ./backend/pyproject.toml ---

[project]
name = "edutech_platform_backend"
version = "0.1.0"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true


--- FILE: ./backend/src/__init__.py ---



--- FILE: ./backend/src/api/__init__.py ---



--- FILE: ./backend/src/api/telegram.py ---

from fastapi import APIRouter, HTTPException, Depends, Request, Header
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from typing import Optional
from datetime import datetime
from loguru import logger

from core.config import settings
from models.telegram import TelegramUser
from models.user import User
from schemas.telegram import TelegramLinkRequest, TelegramLinkResponse, TelegramWebhookData
from services.telegram_bot import telegram_bot
from utils.database import get_db_session
from utils.auth import get_current_user

router = APIRouter(prefix="/telegram", tags=["telegram"])


@router.post("/webhook")
async def telegram_webhook(
    request: Request,
    x_telegram_bot_api_secret_token: Optional[str] = Header(None),
    db: AsyncSession = Depends(get_db_session)
):
    """Handle Telegram webhook updates"""
    
    # Verify webhook secret if configured
    if settings.TELEGRAM_WEBHOOK_SECRET:
        if x_telegram_bot_api_secret_token != settings.TELEGRAM_WEBHOOK_SECRET:
            logger.warning("Invalid webhook secret token")
            raise HTTPException(status_code=403, detail="Invalid secret token")
    
    try:
        update_data = await request.json()
        await telegram_bot.process_webhook_update(update_data)
        return JSONResponse({"status": "ok"})
    except Exception as e:
        logger.error(f"Error processing webhook: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


@router.get("/link")
async def telegram_link_page(
    token: str,
    db: AsyncSession = Depends(get_db_session)
):
    """Telegram link page - returns link status and instructions"""
    
    # Find telegram user by link token
    result = await db.execute(
        select(TelegramUser).where(
            TelegramUser.link_token == token,
            TelegramUser.link_token_expires_at > datetime.utcnow()
        )
    )
    telegram_user = result.scalar_one_or_none()
    
    if not telegram_user:
        raise HTTPException(
            status_code=404, 
            detail="Invalid or expired link token"
        )
    
    return {
        "telegram_id": telegram_user.telegram_id,
        "telegram_username": telegram_user.telegram_username,
        "telegram_first_name": telegram_user.telegram_first_name,
        "is_linked": telegram_user.is_linked,
        "token": token
    }


@router.post("/link")
async def link_telegram_account(
    link_request: TelegramLinkRequest,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """Link user's EduTech account with Telegram"""
    
    # Find telegram user by link token
    result = await db.execute(
        select(TelegramUser).where(
            TelegramUser.link_token == link_request.token,
            TelegramUser.link_token_expires_at > datetime.utcnow()
        )
    )
    telegram_user = result.scalar_one_or_none()
    
    if not telegram_user:
        raise HTTPException(
            status_code=404,
            detail="Invalid or expired link token"
        )
    
    if telegram_user.is_linked:
        raise HTTPException(
            status_code=400,
            detail="This Telegram account is already linked"
        )
    
    # Check if user already has a linked Telegram account
    existing_link = await db.execute(
        select(TelegramUser).where(
            TelegramUser.user_id == current_user.id,
            TelegramUser.is_linked == True
        )
    )
    if existing_link.scalar_one_or_none():
        raise HTTPException(
            status_code=400,
            detail="Your account is already linked to another Telegram account"
        )
    
    # Link the accounts
    await db.execute(
        update(TelegramUser)
        .where(TelegramUser.id == telegram_user.id)
        .values(
            user_id=current_user.id,
            is_linked=True,
            linked_at=datetime.utcnow(),
            link_token=None,
            link_token_expires_at=None
        )
    )
    
    # REMOVED: This block is no longer needed
    
    await db.commit()
    
    logger.info(f"Successfully linked user {current_user.email} with Telegram {telegram_user.telegram_id}")
    
    return TelegramLinkResponse(
        success=True,
        message="Successfully linked your accounts!",
        telegram_username=telegram_user.telegram_username,
        user_name=current_user.full_name
    )


@router.delete("/unlink")
async def unlink_telegram_account(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """Unlink user's Telegram account"""
    
    # Find linked telegram account
    result = await db.execute(
        select(TelegramUser).where(
            TelegramUser.user_id == current_user.id,
            TelegramUser.is_linked == True
        )
    )
    telegram_user = result.scalar_one_or_none()
    
    if not telegram_user:
        raise HTTPException(
            status_code=404,
            detail="No linked Telegram account found"
        )
    
    # Unlink accounts
    await db.execute(
        update(TelegramUser)
        .where(TelegramUser.id == telegram_user.id)
        .values(
            user_id=None,
            is_linked=False,
            linked_at=None
        )
    )
    
    # REMOVED: This block is no longer needed
    
    await db.commit()
    
    logger.info(f"Successfully unlinked user {current_user.email} from Telegram {telegram_user.telegram_id}")
    
    return {"success": True, "message": "Successfully unlinked Telegram account"}


@router.get("/status")
async def get_telegram_link_status(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """Get current user's Telegram link status"""
    
    result = await db.execute(
        select(TelegramUser).where(
            TelegramUser.user_id == current_user.id,
            TelegramUser.is_linked == True
        )
    )
    telegram_user = result.scalar_one_or_none()
    
    if telegram_user:
        return {
            "is_linked": True,
            "telegram_username": telegram_user.telegram_username,
            "telegram_first_name": telegram_user.telegram_first_name,
            "linked_at": telegram_user.linked_at
        }
    else:
        return {
            "is_linked": False,
            "telegram_username": None,
            "telegram_first_name": None,
            "linked_at": None
        }

--- FILE: ./backend/src/core/__init__.py ---



--- FILE: ./backend/src/core/config.py ---

from pydantic_settings import BaseSettings
from typing import Optional, List
import os


class Settings(BaseSettings):
    # Application
    APP_NAME: str = "EduTech Platform API"
    APP_VERSION: str = "1.0.0"
    DEBUG: bool = False
    ENVIRONMENT: str = "development"
    
    # Server
    HOST: str = "0.0.0.0"
    PORT: int = 8000
    WORKERS: int = 1
    
    # Database
    DATABASE_URL: str
    DATABASE_POOL_SIZE: int = 10
    DATABASE_MAX_OVERFLOW: int = 20
    
    # Hasura
    HASURA_GRAPHQL_ENDPOINT: str
    HASURA_ADMIN_SECRET: str
    
    # JWT
    SECRET_KEY: str
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    
    # CORS
    CORS_ORIGINS: List[str] = ["http://localhost:3000"]
    
    # File Upload
    MAX_FILE_SIZE: int = 10 * 1024 * 1024  # 10MB
    ALLOWED_EXTENSIONS: set[str] = {".pdf", ".docx", ".txt"}
    UPLOAD_DIR: str = "uploads"
    
    # Telegram Bot
    TELEGRAM_BOT_TOKEN: Optional[str] = None
    TELEGRAM_WEBHOOK_URL: Optional[str] = None
    TELEGRAM_WEBHOOK_SECRET: Optional[str] = None
    
    # Security
    ALLOWED_HOSTS: List[str] = ["*"]
    
    # Logging
    LOG_LEVEL: str = "INFO"
    LOG_FORMAT: str = "json"
    
    # Monitoring
    ENABLE_METRICS: bool = False
    METRICS_PORT: int = 9090
    
    # Rate Limiting
    RATE_LIMIT_PER_MINUTE: int = 60
    
    @property
    def is_production(self) -> bool:
        return self.ENVIRONMENT.lower() == "production"
    
    @property
    def is_development(self) -> bool:
        return self.ENVIRONMENT.lower() == "development"
    
    class Config:
        env_file = "../.env"
        case_sensitive = True


settings = Settings()


--- FILE: ./backend/src/edutech_platform_backend.egg-info/PKG-INFO ---

Metadata-Version: 2.4
Name: edutech_platform_backend
Version: 0.1.0


--- FILE: ./backend/src/main.py ---

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from loguru import logger
import sys
import asyncio
from contextlib import asynccontextmanager

from core.config import settings
from api.telegram import router as telegram_router
from services.telegram_bot import telegram_bot
from utils.database import init_database, close_database
from middleware.error_handler import global_exception_handler

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Manage application lifespan"""
    # Startup
    logger.info("Application starting up...")
    
    # Initialize database
    init_database()
    
    # Initialize Telegram bot
    try:
        await telegram_bot.initialize()
        
        # Start bot in polling mode for development
        if settings.DEBUG and not settings.TELEGRAM_WEBHOOK_URL:
            asyncio.create_task(telegram_bot.start_polling())
            logger.info("Telegram bot started in polling mode")
        elif settings.TELEGRAM_WEBHOOK_URL:
            await telegram_bot.start_webhook()
            logger.info("Telegram bot webhook configured")
            
        logger.info("Application startup completed")
    except Exception as e:
        logger.error(f"Error during startup: {str(e)}")
    
    yield
    
    # Shutdown
    logger.info("Application shutting down...")
    try:
        await telegram_bot.stop()
        await close_database()
        logger.info("Application shutdown completed")
    except Exception as e:
        logger.error(f"Error during shutdown: {str(e)}")

# Configure logging
logger.remove()
logger.add(
    sys.stdout,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    level="INFO" if not settings.DEBUG else "DEBUG",
)

# Initialize FastAPI
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    docs_url="/api/docs" if settings.DEBUG else None,
    redoc_url="/api/redoc" if settings.DEBUG else None,
    lifespan=lifespan
)

# Security Middleware
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"] if settings.DEBUG else ["yourdomain.com"],
)

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Add global exception handler
app.add_exception_handler(Exception, global_exception_handler)

# Include routers
app.include_router(telegram_router, prefix="/api")


@app.get("/health")
async def health_check():
    """Basic health check endpoint"""
    return JSONResponse(
        content={
            "status": "healthy",
            "app": settings.APP_NAME,
            "version": settings.APP_VERSION,
            "environment": settings.ENVIRONMENT
        }
    )

@app.get("/health/detailed")
async def detailed_health_check():
    """Detailed health check with service status"""
    from utils.database import async_session_factory
    
    health_status = {
        "status": "healthy",
        "app": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "environment": settings.ENVIRONMENT,
        "services": {}
    }
    
    # Check database connection
    try:
        if async_session_factory:
            async with async_session_factory() as session:
                await session.execute("SELECT 1")
            health_status["services"]["database"] = "healthy"
        else:
            health_status["services"]["database"] = "not_initialized"
    except Exception as e:
        health_status["services"]["database"] = f"unhealthy: {str(e)}"
        health_status["status"] = "unhealthy"
    
    # Check Telegram bot status
    try:
        if telegram_bot.application:
            health_status["services"]["telegram_bot"] = "healthy"
        else:
            health_status["services"]["telegram_bot"] = "not_initialized"
    except Exception as e:
        health_status["services"]["telegram_bot"] = f"unhealthy: {str(e)}"
        health_status["status"] = "unhealthy"
    
    status_code = 200 if health_status["status"] == "healthy" else 503
    return JSONResponse(content=health_status, status_code=status_code)


@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": "EduTech Platform API",
        "version": settings.APP_VERSION,
        "docs": "/api/docs" if settings.DEBUG else "Documentation disabled in production",
    }


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level="info",
    )

--- FILE: ./backend/src/middleware/__init__.py ---

from .error_handler import global_exception_handler

__all__ = ["global_exception_handler"]

--- FILE: ./backend/src/middleware/error_handler.py ---

from fastapi import Request, HTTPException
from fastapi.responses import JSONResponse
from loguru import logger
import traceback
from typing import Union


async def global_exception_handler(request: Request, exc: Exception) -> JSONResponse:
    """Global exception handler for the application"""
    
    # Log the error
    logger.error(f"Global exception handler caught: {type(exc).__name__}: {str(exc)}")
    logger.error(f"Request URL: {request.url}")
    logger.error(f"Request method: {request.method}")
    
    # Log full traceback in debug mode
    if hasattr(request.app.state, 'settings') and request.app.state.settings.DEBUG:
        logger.error(f"Traceback: {traceback.format_exc()}")
    
    # Handle specific exception types
    if isinstance(exc, HTTPException):
        return JSONResponse(
            status_code=exc.status_code,
            content={"error": exc.detail, "type": "http_exception"}
        )
    
    # Handle database connection errors
    if "connection" in str(exc).lower() or "database" in str(exc).lower():
        logger.error("Database connection error detected")
        return JSONResponse(
            status_code=503,
            content={
                "error": "Service temporarily unavailable. Please try again later.",
                "type": "database_error"
            }
        )
    
    # Handle Telegram API errors
    if "telegram" in str(exc).lower() or "bot" in str(exc).lower():
        logger.error("Telegram API error detected")
        return JSONResponse(
            status_code=502,
            content={
                "error": "Telegram service temporarily unavailable.",
                "type": "telegram_error"
            }
        )
    
    # Generic server error
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error. Please contact support if the problem persists.",
            "type": "internal_error"
        }
    )

--- FILE: ./backend/src/models/__init__.py ---

from .base import Base
from .user import User, UserRole
from .telegram import TelegramUser

__all__ = ["Base", "User", "UserRole", "TelegramUser"]

--- FILE: ./backend/src/models/base.py ---

from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

--- FILE: ./backend/src/models/telegram.py ---

from sqlalchemy import Column, String, BigInteger, Boolean, DateTime, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import uuid

from models.base import Base


class TelegramUser(Base):
    __tablename__ = "telegram_users"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    user_id = Column(UUID(as_uuid=True), ForeignKey("users.id", ondelete="CASCADE"), nullable=True, unique=True)
    telegram_id = Column(BigInteger, unique=True, nullable=False, index=True)
    telegram_username = Column(String(255), nullable=True)
    telegram_first_name = Column(String(255), nullable=True)
    telegram_last_name = Column(String(255), nullable=True)
    is_linked = Column(Boolean, default=False)
    link_token = Column(String(255), unique=True, nullable=True, index=True)
    link_token_expires_at = Column(DateTime(timezone=True), nullable=True)
    linked_at = Column(DateTime(timezone=True), nullable=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Relationships
    # UPDATED: Removed the foreign_keys argument
    user = relationship("User", back_populates="telegram_user")
    
    def __repr__(self):
        return f"<TelegramUser(telegram_id={self.telegram_id}, username={self.telegram_username})>"

--- FILE: ./backend/src/models/user.py ---

from sqlalchemy import Column, String, Boolean, DateTime, Enum as SQLEnum
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import uuid
import enum

from models.base import Base


class UserRole(str, enum.Enum):
    ADMIN = "admin"
    INSTRUCTOR = "instructor" 
    STUDENT = "student"


class User(Base):
    __tablename__ = "users"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    email = Column(String(255), unique=True, nullable=False, index=True)
    password_hash = Column(String(255), nullable=False)
    full_name = Column(String(255), nullable=False)
    role = Column(SQLEnum(UserRole), nullable=False, default=UserRole.STUDENT)
    is_active = Column(Boolean, default=True)
    email_verified = Column(Boolean, default=False)
    # REMOVED: telegram_user_id column
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Relationships
    # UPDATED: No more foreign_keys, added uselist=False for one-to-one
    telegram_user = relationship("TelegramUser", back_populates="user", uselist=False)
    
    def __repr__(self):
        return f"<User(email={self.email}, role={self.role})>"

--- FILE: ./backend/src/schemas/__init__.py ---

from .telegram import (
    TelegramLinkRequest,
    TelegramLinkResponse, 
    TelegramWebhookData,
    TelegramUserCreate,
    TelegramUserResponse,
    TelegramLinkStatusResponse
)

__all__ = [
    "TelegramLinkRequest",
    "TelegramLinkResponse",
    "TelegramWebhookData", 
    "TelegramUserCreate",
    "TelegramUserResponse",
    "TelegramLinkStatusResponse"
]

--- FILE: ./backend/src/schemas/telegram.py ---

from pydantic import BaseModel
from typing import Optional, Dict, Any
from datetime import datetime


class TelegramLinkRequest(BaseModel):
    token: str


class TelegramLinkResponse(BaseModel):
    success: bool
    message: str
    telegram_username: Optional[str] = None
    user_name: Optional[str] = None


class TelegramWebhookData(BaseModel):
    update_id: int
    message: Optional[Dict[str, Any]] = None
    callback_query: Optional[Dict[str, Any]] = None


class TelegramUserCreate(BaseModel):
    telegram_id: int
    telegram_username: Optional[str] = None
    telegram_first_name: Optional[str] = None
    telegram_last_name: Optional[str] = None


class TelegramUserResponse(BaseModel):
    id: str
    telegram_id: int
    telegram_username: Optional[str]
    telegram_first_name: Optional[str]
    telegram_last_name: Optional[str]
    is_linked: bool
    linked_at: Optional[datetime]
    
    class Config:
        from_attributes = True


class TelegramLinkStatusResponse(BaseModel):
    is_linked: bool
    telegram_username: Optional[str]
    telegram_first_name: Optional[str]
    linked_at: Optional[datetime]

--- FILE: ./backend/src/services/__init__.py ---



--- FILE: ./backend/src/services/telegram_bot.py ---

import asyncio
import secrets
import string
from datetime import datetime, timedelta
from typing import Optional, Callable

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from loguru import logger
from sqlalchemy import select
from sqlalchemy import update as sqlalchemy_update  # Import with an alias
from sqlalchemy.ext.asyncio import AsyncSession  # <-- FIX 1: Add this import
from core.config import settings


class TelegramBotService:
    def __init__(self):
        self.application = None
        self.db_session_factory = None
        
    async def initialize(self):
        """Initialize the Telegram bot application"""
        if not settings.TELEGRAM_BOT_TOKEN:
            logger.warning("TELEGRAM_BOT_TOKEN not configured, Telegram bot disabled")
            return
        
        # Ensure database is initialized and get the factory
        from utils.database import init_database, async_session_factory
        init_database()
        
        # Store session factory
        self.db_session_factory = async_session_factory
        
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        
        # Add handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("link", self.link_command))
        self.application.add_handler(CommandHandler("unlink", self.unlink_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        logger.info("Telegram bot initialized successfully")
        
    async def start_webhook(self):
        """Start webhook mode"""
        if not self.application or not settings.TELEGRAM_WEBHOOK_URL:
            return
            
        await self.application.initialize()
        await self.application.start()
        await self.application.bot.set_webhook(
            url=settings.TELEGRAM_WEBHOOK_URL,
            secret_token=settings.TELEGRAM_WEBHOOK_SECRET
        )
        logger.info(f"Webhook set to: {settings.TELEGRAM_WEBHOOK_URL}")
        
    async def start_polling(self):
        """Start polling mode for development"""
        if not self.application:
            return
            
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        logger.info("Bot started in polling mode")
        
    async def stop(self):
        """Stop the bot"""
        if self.application:
            await self.application.stop()
            await self.application.shutdown()
            
    async def process_webhook_update(self, update_data: dict):
        """Process webhook update"""
        if not self.application:
            return
            
        update = Update.de_json(update_data, self.application.bot)
        await self.application.process_update(update)
        
    def generate_link_token(self) -> str:
        """Generate a secure link token"""
        return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(32))
        
    async def get_or_create_telegram_user(self, session: AsyncSession, telegram_id: int, user_data: dict):
        """Get or create telegram user record"""
        # Import here to avoid circular imports
        from models.telegram import TelegramUser
        
        # Check if telegram user exists
        result = await session.execute(
            select(TelegramUser).where(TelegramUser.telegram_id == telegram_id)
        )
        telegram_user = result.scalar_one_or_none()
        
        if not telegram_user:
            # Create new telegram user
            telegram_user = TelegramUser(
                telegram_id=telegram_id,
                telegram_username=user_data.get('username'),
                telegram_first_name=user_data.get('first_name'),
                telegram_last_name=user_data.get('last_name')
            )
            session.add(telegram_user)
            await session.commit()
            await session.refresh(telegram_user)
            
        return telegram_user
            
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        
        async with self.db_session_factory() as session:
            telegram_user = await self.get_or_create_telegram_user(
                session,
                user.id, 
                {
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name
                }
            )
            
            welcome_message = (
                f"🎓 Welcome to YeetBitz  Bot!\n\n"
                f"Hi {user.first_name}! I can help you take tests and access your study materials.\n\n"
                f"Available commands:\n"
                f"• /link - Link your account\n"
                f"• /status - Check linking status\n"
                f"• /unlink - Unlink your account\n\n"
                f"To get started, please link your EduTech account using /link"
            )
            
            keyboard = [
                [InlineKeyboardButton("🔗 Link Account", callback_data="link_account")],
                [InlineKeyboardButton("ℹ️ Help", callback_data="help")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_message, reply_markup=reply_markup)
        
    async def link_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /link command"""
        from models.telegram import TelegramUser
        
        user = update.effective_user
        
        async with self.db_session_factory() as session:
            # Check if already linked
            result = await session.execute(
                select(TelegramUser).where(
                    TelegramUser.telegram_id == user.id,
                    TelegramUser.is_linked == True
                )
            )
            telegram_user = result.scalar_one_or_none()
            
            if telegram_user:
                await update.message.reply_text(
                    "✅ Your account is already linked!\n"
                    "Use /status to view details or /unlink to disconnect."
                )
                return
                
            # Get or create telegram user
            telegram_user = await self.get_or_create_telegram_user(
                session,
                user.id,
                {
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name
                }
            )
            
            # Generate link token
            link_token = self.generate_link_token()
            expires_at = datetime.utcnow() + timedelta(hours=1)
            
            await session.execute(
                sqlalchemy_update(TelegramUser)
                .where(TelegramUser.telegram_id == user.id)
                .values(
                    link_token=link_token,
                    link_token_expires_at=expires_at
                )
            )
            await session.commit()
                
            link_url = f"{settings.CORS_ORIGINS[0]}/telegram/link?token={link_token}"
            
            # --- MODIFICATION START ---
            
            message = (
                f"🔗 Account Linking\n\n"
                f"To link your EduTech account, copy the link below and open it in your browser:\n\n"
                f"➡️ {link_url}\n\n"
                f"Alternatively, go to the settings page and paste this token:\n"
                f"`{link_token}`\n\n"
                f"⏰ This link expires in 1 hour.\n"
                f"🔒 For security, don't share this with others."
            )
            
            # We send the message without any buttons (reply_markup)
            await update.message.reply_text(message, parse_mode='Markdown')
            
    async def unlink_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /unlink command"""
        from models.telegram import TelegramUser
        
        user = update.effective_user
        
        async with self.db_session_factory() as session:
            result = await session.execute(
                select(TelegramUser).where(TelegramUser.telegram_id == user.id)
            )
            telegram_user = result.scalar_one_or_none()
            
            if not telegram_user or not telegram_user.is_linked:
                await update.message.reply_text(
                    "❌ No linked account found.\n"
                    "Use /link to connect your EduTech account."
                )
                return
                
            # Unlink account
            await session.execute(
                sqlalchemy_update(TelegramUser)  # Use the new alias
                .where(TelegramUser.telegram_id == user.id)
                .values(
                    is_linked=False,
                    user_id=None,
                    linked_at=None,
                    link_token=None,
                    link_token_expires_at=None
                )
            )
            await session.commit()
            
            await update.message.reply_text(
                "✅ Account unlinked successfully!\n"
                "Use /link to connect again anytime."
            )
            
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /status command"""
        from models.telegram import TelegramUser
        from models.user import User
        
        user = update.effective_user
        
        async with self.db_session_factory() as session:
            result = await session.execute(
                select(TelegramUser, User)
                .outerjoin(User, TelegramUser.user_id == User.id)
                .where(TelegramUser.telegram_id == user.id)
            )
            row = result.first()
            
            if not row or not row[0]:
                await update.message.reply_text(
                    "❌ No account record found.\n"
                    "Use /start to initialize and /link to connect."
                )
                return
                
            telegram_user, linked_user = row
            
            if telegram_user.is_linked and linked_user:
                status_message = (
                    f"✅ Account Status: Linked\n\n"
                    f"👤 EduTech Account: {linked_user.full_name}\n"
                    f"📧 Email: {linked_user.email}\n"
                    f"🎭 Role: {linked_user.role}\n"
                    f"🔗 Linked: {telegram_user.linked_at.strftime('%Y-%m-%d %H:%M')}\n\n"
                    f"Ready to take tests! 🎓"
                )
            else:
                status_message = (
                    f"❌ Account Status: Not Linked\n\n"
                    f"Use /link to connect your EduTech account."
                )
                
            await update.message.reply_text(status_message)
            
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline button callbacks"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "link_account":
            await self.link_command(update, context)
        elif query.data == "help":
            help_message = (
                "🎓 EduTech Platform Bot Help\n\n"
                "This bot allows you to:\n"
                "• Link your EduTech account\n"
                "• Take tests directly from Telegram\n"
                "• View your progress and results\n\n"
                "Commands:\n"
                "• /start - Welcome message\n"
                "• /link - Link your account\n"
                "• /status - Check status\n"
                "• /unlink - Disconnect account\n\n"
                "Need more help? Contact support."
            )
            await query.edit_message_text(help_message)
        elif query.data == "regenerate_link":
            await self.link_command(update, context)


# Global bot instance
telegram_bot = TelegramBotService()

--- FILE: ./backend/src/utils/__init__.py ---



--- FILE: ./backend/src/utils/auth.py ---

from fastapi import HTTPException, Depends, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import JWTError, jwt
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from datetime import datetime

from core.config import settings
from models.user import User
from utils.database import get_db_session

security = HTTPBearer()


async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: AsyncSession = Depends(get_db_session)
) -> User:
    """Get current authenticated user from JWT token"""
    
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(
            credentials.credentials,
            settings.SECRET_KEY,
            algorithms=[settings.ALGORITHM]
        )
        user_id: str = payload.get("sub")
        if user_id is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    # Get user from database
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar_one_or_none()
    
    if user is None:
        raise credentials_exception
    
    if not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user"
        )
    
    return user

--- FILE: ./backend/src/utils/database.py ---

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from typing import AsyncGenerator
from core.config import settings

# Global variables for engine and session factory
engine = None
async_session_factory = None

def init_database():
    """Initialize database engine and session factory"""
    global engine, async_session_factory
    
    if engine is None:
        # Ensure we're using asyncpg driver
        database_url = settings.DATABASE_URL
        if not database_url.startswith("postgresql+asyncpg://"):
            if database_url.startswith("postgresql://"):
                database_url = database_url.replace("postgresql://", "postgresql+asyncpg://")
            else:
                raise ValueError("DATABASE_URL must be a PostgreSQL connection string")
        
        engine = create_async_engine(
            database_url,
            echo=settings.DEBUG,
            future=True,
            pool_pre_ping=True,
            pool_recycle=300,
            pool_size=settings.DATABASE_POOL_SIZE,
            max_overflow=settings.DATABASE_MAX_OVERFLOW
        )
        
        async_session_factory = async_sessionmaker(
            engine,
            class_=AsyncSession,
            expire_on_commit=False
        )

async def get_db_session() -> AsyncGenerator[AsyncSession, None]:
    """Dependency to get database session"""
    if async_session_factory is None:
        init_database()
        
    async with async_session_factory() as session:
        try:
            yield session
        finally:
            await session.close()

async def close_database():
    """Close database engine"""
    global engine
    if engine:
        await engine.dispose()

--- FILE: ./backend/src/utils/rate_limiter.py ---

from fastapi import Request, HTTPException
from typing import Dict
import time
from collections import defaultdict, deque
from core.config import settings


class RateLimiter:
    def __init__(self, max_requests: int = None, window_seconds: int = 60):
        self.max_requests = max_requests or settings.RATE_LIMIT_PER_MINUTE
        self.window_seconds = window_seconds
        self.requests: Dict[str, deque] = defaultdict(deque)
    
    def is_allowed(self, identifier: str) -> bool:
        """Check if request is allowed based on rate limiting"""
        now = time.time()
        window_start = now - self.window_seconds
        
        # Clean old requests
        request_times = self.requests[identifier]
        while request_times and request_times[0] < window_start:
            request_times.popleft()
        
        # Check if under limit
        if len(request_times) >= self.max_requests:
            return False
        
        # Add current request
        request_times.append(now)
        return True
    
    def get_client_identifier(self, request: Request) -> str:
        """Get client identifier for rate limiting"""
        # Try to get real IP from headers (for reverse proxy setups)
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip
        
        # Fallback to direct client IP
        return request.client.host if request.client else "unknown"


# Global rate limiter instance
rate_limiter = RateLimiter()


async def check_rate_limit(request: Request):
    """Rate limiting dependency"""
    if not settings.is_production:
        return  # Skip rate limiting in development
    
    identifier = rate_limiter.get_client_identifier(request)
    
    if not rate_limiter.is_allowed(identifier):
        raise HTTPException(
            status_code=429,
            detail="Too many requests. Please try again later.",
            headers={"Retry-After": "60"}
        )

--- FILE: ./docker-compose.yml ---

version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: edutech_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: edutech_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  hasura:
    image: hasura/graphql-engine:v2.36.0
    container_name: edutech_hasura
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@postgres:5432/edutech_db
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET:-myadminsecretkey}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"${JWT_SECRET:-your-256-bit-secret-replace-this-in-production}"}'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: edutech_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

--- FILE: ./frontend/.env.local ---

# App
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:8000

# Hasura
NEXT_PUBLIC_HASURA_GRAPHQL_URL=http://localhost:8081/v1/graphql
HASURA_GRAPHQL_ADMIN_SECRET=myadminsecretkey

# NextAuth
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=edutech-platform-secret-key-2024-development-change-in-production

# JWT
JWT_SECRET=your-256-bit-secret-replace-this-in-production
BACKEND_SECRET_KEY=e8a3b2c1d0f9e8d7c6b5a4b3c2d1e0f9a8b7c6d5e4f3a2b1c0d9e8f7a6b5c4d3


--- FILE: ./frontend/.eslintrc.json ---

{
  "extends": [
    "next/core-web-vitals",
    "prettier"
  ],
  "rules": {
    "no-console": ["warn", { "allow": ["warn", "error"] }],
    "prefer-const": "error",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }]
  }
}


--- FILE: ./frontend/.prettierignore ---

node_modules
.next
out
build
dist
*.config.js


--- FILE: ./frontend/.prettierrc.json ---

{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "tabWidth": 2,
  "useTabs": false,
  "printWidth": 100,
  "arrowParens": "always",
  "plugins": ["prettier-plugin-tailwindcss"]
}


--- FILE: ./frontend/eslint.config.mjs ---

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;


--- FILE: ./frontend/next-env.d.ts ---

/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


--- FILE: ./frontend/next.config.ts ---

import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  
  async rewrites() {
    return [
      {
        // This rule is now specific to the telegram API
        source: '/api/telegram/:path*',
        destination: 'http://localhost:8000/api/telegram/:path*',
      },
    ];
  },
};

export default nextConfig;

--- FILE: ./frontend/package.json ---

{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@apollo/client": "^4.0.6",
    "@hookform/resolvers": "^5.2.2",
    "@tanstack/react-query": "^5.90.2",
    "@types/bcryptjs": "^3.0.0",
    "@types/jsonwebtoken": "^9.0.10",
    "bcryptjs": "^3.0.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "graphql": "^16.11.0",
    "graphql-tag": "^2.12.6",
    "jsonwebtoken": "^9.0.2",
    "next": "15.5.4",
    "next-auth": "5.0.0-beta.29",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.63.0",
    "sonner": "^2.0.7",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^4.1.11",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.4",
    "eslint-config-prettier": "^10.1.8",
    "husky": "^9.1.7",
    "lint-staged": "^16.2.3",
    "prettier": "^3.6.2",
    "prettier-plugin-tailwindcss": "^0.6.14",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


--- FILE: ./frontend/postcss.config.mjs ---

const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;


--- FILE: ./frontend/src/app/(auth)/layout.tsx ---

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      {children}
    </>
  )
}

--- FILE: ./frontend/src/app/(auth)/login/page.tsx ---

'use client'

import { useState } from 'react'
import { signIn } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')

    try {
      const result = await signIn('credentials', {
        email,
        password,
        redirect: false
      })

      if (result?.error) {
        setError('Invalid credentials')
      } else {
        router.push('/dashboard')
      }
    } catch (error) {
      setError('An error occurred. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="max-w-md w-full space-y-8 p-8">
        <div>
          <h2 className="text-center text-3xl font-bold text-foreground">
            Sign in to EduTech
          </h2>
          <p className="mt-2 text-center text-sm text-muted-foreground">
            Or{' '}
            <Link href="/signup" className="font-medium text-primary hover:underline">
              create a new account
            </Link>
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-foreground">
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-input rounded-md placeholder-muted-foreground text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Email address"
              />
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-foreground">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-input rounded-md placeholder-muted-foreground text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Password"
              />
            </div>
          </div>

          {error && (
            <div className="text-destructive text-sm text-center">{error}</div>
          )}

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-primary-foreground bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50"
            >
              {isLoading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>

          <div className="text-center">
            <p className="text-sm text-muted-foreground">
              Default admin: admin@edutech.com / Admin@123
            </p>
          </div>
        </form>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/app/(auth)/signup/page.tsx ---

'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'

export default function SignupPage() {
  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    password: '',
    confirmPassword: '',
    role: 'student' as 'admin' | 'instructor' | 'student'
  })
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')

    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match')
      setIsLoading(false)
      return
    }

    try {
      // Create user via API route
      const response = await fetch('/api/auth/signup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email,
          password: formData.password,
          fullName: formData.fullName,
          role: formData.role
        })
      })

      const result = await response.json()

      if (!response.ok) {
        setError(result.error || 'Failed to create account')
      } else {
        router.push('/login?message=Account created successfully')
      }
    } catch (error) {
      setError('An error occurred. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="max-w-md w-full space-y-8 p-8">
        <div>
          <h2 className="text-center text-3xl font-bold text-foreground">
            Create your account
          </h2>
          <p className="mt-2 text-center text-sm text-muted-foreground">
            Or{' '}
            <Link href="/login" className="font-medium text-primary hover:underline">
              sign in to your existing account
            </Link>
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="fullName" className="block text-sm font-medium text-foreground">
                Full Name
              </label>
              <input
                id="fullName"
                name="fullName"
                type="text"
                required
                value={formData.fullName}
                onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-input rounded-md placeholder-muted-foreground text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Full name"
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-foreground">
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-input rounded-md placeholder-muted-foreground text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Email address"
              />
            </div>
            <div>
              <label htmlFor="role" className="block text-sm font-medium text-foreground">
                Role
              </label>
              <select
                id="role"
                name="role"
                value={formData.role}
                onChange={(e) => setFormData({ ...formData, role: e.target.value as 'admin' | 'instructor' | 'student' })}
                className="mt-1 block w-full px-3 py-2 border border-input rounded-md text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              >
                <option value="student">Student</option>
                <option value="instructor">Instructor</option>
                <option value="admin">Admin</option>
              </select>
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-foreground">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="new-password"
                required
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-input rounded-md placeholder-muted-foreground text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Password"
              />
            </div>
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-foreground">
                Confirm Password
              </label>
              <input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                autoComplete="new-password"
                required
                value={formData.confirmPassword}
                onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-input rounded-md placeholder-muted-foreground text-foreground bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Confirm password"
              />
            </div>
          </div>

          {error && (
            <div className="text-destructive text-sm text-center">{error}</div>
          )}

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-primary-foreground bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50"
            >
              {isLoading ? 'Creating account...' : 'Create account'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/app/(dashboard)/admin/page.tsx ---

'use client'

import { useSession } from 'next-auth/react'

export default function AdminDashboard() {
  const { data: session } = useSession()

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-foreground">Admin Dashboard</h1>
        <p className="text-muted-foreground">
          Welcome back, {session?.user?.name}! Manage your EduTech platform.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Total Users</h3>
          <p className="text-3xl font-bold text-primary">1,234</p>
          <p className="text-sm text-muted-foreground">+12% from last month</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Active Tests</h3>
          <p className="text-3xl font-bold text-primary">56</p>
          <p className="text-sm text-muted-foreground">+8% from last month</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Documents</h3>
          <p className="text-3xl font-bold text-primary">789</p>
          <p className="text-sm text-muted-foreground">+15% from last month</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">System Health</h3>
          <p className="text-3xl font-bold text-green-600">99.9%</p>
          <p className="text-sm text-muted-foreground">All systems operational</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Quick Actions</h3>
          <div className="space-y-3">
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📊 View System Analytics
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              👥 Manage Users
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📝 Review Content
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              ⚙️ System Settings
            </button>
          </div>
        </div>

        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Recent Activity</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-sm">New user registered</span>
              <span className="text-xs text-muted-foreground">2 mins ago</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm">Test completed by student</span>
              <span className="text-xs text-muted-foreground">5 mins ago</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm">Document uploaded</span>
              <span className="text-xs text-muted-foreground">10 mins ago</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm">System backup completed</span>
              <span className="text-xs text-muted-foreground">1 hour ago</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/app/(dashboard)/instructor/page.tsx ---

'use client'

import { useSession } from 'next-auth/react'

export default function InstructorDashboard() {
  const { data: session } = useSession()

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-foreground">Instructor Dashboard</h1>
        <p className="text-muted-foreground">
          Welcome back, {session?.user?.name}! Manage your courses and students.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">My Courses</h3>
          <p className="text-3xl font-bold text-primary">8</p>
          <p className="text-sm text-muted-foreground">Active courses</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Students</h3>
          <p className="text-3xl font-bold text-primary">156</p>
          <p className="text-sm text-muted-foreground">Total enrolled</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Pending Reviews</h3>
          <p className="text-3xl font-bold text-orange-600">23</p>
          <p className="text-sm text-muted-foreground">Tests to grade</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Quick Actions</h3>
          <div className="space-y-3">
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📁 Upload Document
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              ❓ Create Question Bank
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📝 Create New Test
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              👥 Assign Test to Students
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📊 View Student Progress
            </button>
          </div>
        </div>

        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Recent Tests</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Mathematics Quiz 1</span>
                <p className="text-xs text-muted-foreground">45 students completed</p>
              </div>
              <span className="text-xs text-muted-foreground">2 days ago</span>
            </div>
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Physics Chapter 3</span>
                <p className="text-xs text-muted-foreground">23 students completed</p>
              </div>
              <span className="text-xs text-muted-foreground">1 week ago</span>
            </div>
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Chemistry Lab Test</span>
                <p className="text-xs text-muted-foreground">12 students completed</p>
              </div>
              <span className="text-xs text-muted-foreground">2 weeks ago</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/app/(dashboard)/student/page.tsx ---

'use client'

import { useSession } from 'next-auth/react'

export default function StudentDashboard() {
  const { data: session } = useSession()

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-foreground">Student Dashboard</h1>
        <p className="text-muted-foreground">
          Welcome back, {session?.user?.name}! Continue your learning journey.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Assigned Tests</h3>
          <p className="text-3xl font-bold text-primary">5</p>
          <p className="text-sm text-muted-foreground">Pending completion</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Completed Tests</h3>
          <p className="text-3xl font-bold text-green-600">12</p>
          <p className="text-sm text-muted-foreground">This month</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Average Score</h3>
          <p className="text-3xl font-bold text-blue-600">87%</p>
          <p className="text-sm text-muted-foreground">+5% improvement</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Upcoming Tests</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center p-3 bg-secondary rounded-md">
              <div>
                <span className="text-sm font-medium">Mathematics Quiz 2</span>
                <p className="text-xs text-muted-foreground">Due: Tomorrow</p>
              </div>
              <button className="text-xs bg-primary text-primary-foreground px-3 py-1 rounded">
                Start Test
              </button>
            </div>
            <div className="flex justify-between items-center p-3 bg-secondary rounded-md">
              <div>
                <span className="text-sm font-medium">Physics Chapter 4</span>
                <p className="text-xs text-muted-foreground">Due: 3 days</p>
              </div>
              <button className="text-xs bg-primary text-primary-foreground px-3 py-1 rounded">
                Start Test
              </button>
            </div>
            <div className="flex justify-between items-center p-3 bg-secondary rounded-md">
              <div>
                <span className="text-sm font-medium">Chemistry Lab Review</span>
                <p className="text-xs text-muted-foreground">Due: 1 week</p>
              </div>
              <button className="text-xs bg-secondary text-secondary-foreground px-3 py-1 rounded">
                View Details
              </button>
            </div>
          </div>
        </div>

        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Recent Results</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Mathematics Quiz 1</span>
                <p className="text-xs text-muted-foreground">Completed yesterday</p>
              </div>
              <span className="text-sm font-bold text-green-600">92%</span>
            </div>
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Physics Chapter 3</span>
                <p className="text-xs text-muted-foreground">Completed 3 days ago</p>
              </div>
              <span className="text-sm font-bold text-blue-600">85%</span>
            </div>
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Chemistry Basics</span>
                <p className="text-xs text-muted-foreground">Completed 1 week ago</p>
              </div>
              <span className="text-sm font-bold text-yellow-600">78%</span>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-card p-6 rounded-lg border">
        <h3 className="text-lg font-semibold text-card-foreground mb-4">Study Progress</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <div className="flex justify-between mb-2">
              <span className="text-sm">Mathematics</span>
              <span className="text-sm text-muted-foreground">85%</span>
            </div>
            <div className="w-full bg-secondary rounded-full h-2">
              <div className="bg-blue-600 h-2 rounded-full" style={{ width: '85%' }}></div>
            </div>
          </div>
          <div>
            <div className="flex justify-between mb-2">
              <span className="text-sm">Physics</span>
              <span className="text-sm text-muted-foreground">72%</span>
            </div>
            <div className="w-full bg-secondary rounded-full h-2">
              <div className="bg-green-600 h-2 rounded-full" style={{ width: '72%' }}></div>
            </div>
          </div>
          <div>
            <div className="flex justify-between mb-2">
              <span className="text-sm">Chemistry</span>
              <span className="text-sm text-muted-foreground">68%</span>
            </div>
            <div className="w-full bg-secondary rounded-full h-2">
              <div className="bg-yellow-600 h-2 rounded-full" style={{ width: '68%' }}></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/app/api/auth/[...nextauth]/route.ts ---

import { handlers } from "@/lib/auth"

export const { GET, POST } = handlers

--- FILE: ./frontend/src/app/api/auth/signup/route.ts ---

import { NextRequest, NextResponse } from 'next/server'
import { hash } from 'bcryptjs'

export async function POST(request: NextRequest) {
  try {
    const { email, password, fullName, role } = await request.json()

    // Hash password
    const hashedPassword = await hash(password, 12)

    // Create user via Hasura
    const response = await fetch(process.env.NEXT_PUBLIC_HASURA_GRAPHQL_URL!, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-hasura-admin-secret': process.env.HASURA_GRAPHQL_ADMIN_SECRET!,
      },
      body: JSON.stringify({
        query: `
          mutation CreateUser($email: String!, $password_hash: String!, $full_name: String!, $role: user_role!) {
            insert_users_one(object: {
              email: $email,
              password_hash: $password_hash,
              full_name: $full_name,
              role: $role
            }) {
              id
              email
              full_name
              role
            }
          }
        `,
        variables: {
          email,
          password_hash: hashedPassword,
          full_name: fullName,
          role
        }
      })
    })

    const { data, errors } = await response.json()

    if (errors) {
      return NextResponse.json(
        { error: errors[0]?.message || 'Failed to create account' },
        { status: 400 }
      )
    }

    if (data?.insert_users_one) {
      return NextResponse.json(
        { message: 'Account created successfully', user: data.insert_users_one },
        { status: 201 }
      )
    }

    return NextResponse.json(
      { error: 'Failed to create account' },
      { status: 400 }
    )
  } catch (error) {
    console.error('Signup error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

--- FILE: ./frontend/src/app/dashboard/admin/page.tsx ---

'use client'

import { useSession } from 'next-auth/react'

export default function AdminDashboard() {
  const { data: session } = useSession()

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-foreground">Admin Dashboard</h1>
        <p className="text-muted-foreground">
          Welcome back, {session?.user?.name}! Manage your EduTech platform.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Total Users</h3>
          <p className="text-3xl font-bold text-primary">1,234</p>
          <p className="text-sm text-muted-foreground">+12% from last month</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Active Tests</h3>
          <p className="text-3xl font-bold text-primary">56</p>
          <p className="text-sm text-muted-foreground">+8% from last month</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Documents</h3>
          <p className="text-3xl font-bold text-primary">789</p>
          <p className="text-sm text-muted-foreground">+15% from last month</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">System Health</h3>
          <p className="text-3xl font-bold text-green-600">99.9%</p>
          <p className="text-sm text-muted-foreground">All systems operational</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Quick Actions</h3>
          <div className="space-y-3">
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📊 View System Analytics
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              👥 Manage Users
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📝 Review Content
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              ⚙️ System Settings
            </button>
          </div>
        </div>

        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Recent Activity</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-sm">New user registered</span>
              <span className="text-xs text-muted-foreground">2 mins ago</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm">Test completed by student</span>
              <span className="text-xs text-muted-foreground">5 mins ago</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm">Document uploaded</span>
              <span className="text-xs text-muted-foreground">10 mins ago</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm">System backup completed</span>
              <span className="text-xs text-muted-foreground">1 hour ago</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/app/dashboard/instructor/page.tsx ---

'use client'

import { useSession } from 'next-auth/react'

export default function InstructorDashboard() {
  const { data: session } = useSession()

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-foreground">Instructor Dashboard</h1>
        <p className="text-muted-foreground">
          Welcome back, {session?.user?.name}! Manage your courses and students.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">My Courses</h3>
          <p className="text-3xl font-bold text-primary">8</p>
          <p className="text-sm text-muted-foreground">Active courses</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Students</h3>
          <p className="text-3xl font-bold text-primary">156</p>
          <p className="text-sm text-muted-foreground">Total enrolled</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Pending Reviews</h3>
          <p className="text-3xl font-bold text-orange-600">23</p>
          <p className="text-sm text-muted-foreground">Tests to grade</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Quick Actions</h3>
          <div className="space-y-3">
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📁 Upload Document
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              ❓ Create Question Bank
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📝 Create New Test
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              👥 Assign Test to Students
            </button>
            <button className="w-full text-left p-3 rounded-md hover:bg-secondary text-sm">
              📊 View Student Progress
            </button>
          </div>
        </div>

        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Recent Tests</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Mathematics Quiz 1</span>
                <p className="text-xs text-muted-foreground">45 students completed</p>
              </div>
              <span className="text-xs text-muted-foreground">2 days ago</span>
            </div>
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Physics Chapter 3</span>
                <p className="text-xs text-muted-foreground">23 students completed</p>
              </div>
              <span className="text-xs text-muted-foreground">1 week ago</span>
            </div>
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Chemistry Lab Test</span>
                <p className="text-xs text-muted-foreground">12 students completed</p>
              </div>
              <span className="text-xs text-muted-foreground">2 weeks ago</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/app/dashboard/layout.tsx ---

import DashboardLayout from '@/components/layouts/DashboardLayout'

export default function Layout({
  children,
}: {
  children: React.ReactNode
}) {
  return <DashboardLayout>{children}</DashboardLayout>
}

--- FILE: ./frontend/src/app/dashboard/page.tsx ---

'use client'

import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
import { getDefaultRoute, type Role } from '@/lib/rbac'

export default function DashboardPage() {
  const { data: session, status } = useSession()
  const router = useRouter()

  useEffect(() => {
    if (status === 'loading') return

    if (!session) {
      router.push('/login')
      return
    }

    // Redirect to role-specific dashboard
    const userRole = session.user.role as Role
    const defaultRoute = getDefaultRoute(userRole)
    router.push(defaultRoute)
  }, [session, status, router])

  if (status === 'loading') {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-lg">Loading...</div>
      </div>
    )
  }

  return null
}

--- FILE: ./frontend/src/app/dashboard/settings/page.tsx ---

'use client'

import { useState } from 'react'
import { useSession } from 'next-auth/react'
import TelegramIntegration from '@/components/features/TelegramIntegration'

interface SettingsTab {
  id: string
  name: string
  icon: string
}

const settingsTabs: SettingsTab[] = [
  { id: 'profile', name: 'Profile', icon: '👤' },
  { id: 'telegram', name: 'Telegram Integration', icon: '📱' },
  { id: 'notifications', name: 'Notifications', icon: '🔔' },
  { id: 'security', name: 'Security', icon: '🔒' },
]

export default function SettingsPage() {
  const { data: session } = useSession()
  const [activeTab, setActiveTab] = useState('profile')

  if (!session) {
    return <div>Please log in to access settings.</div>
  }

  const renderTabContent = () => {
    switch (activeTab) {
      case 'profile':
        return (
          <div className="space-y-6">
            <h2 className="text-xl font-semibold">Profile Settings</h2>
            <div className="bg-white p-6 rounded-lg shadow">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Name</label>
                  <input
                    type="text"
                    defaultValue={session.user?.name || ''}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    disabled
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Email</label>
                  <input
                    type="email"
                    defaultValue={session.user?.email || ''}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    disabled
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Role</label>
                  <input
                    type="text"
                    defaultValue={session.user?.role || ''}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2"
                    disabled
                  />
                </div>
              </div>
            </div>
          </div>
        )
      
      case 'telegram':
        return <TelegramIntegration />
      
      case 'notifications':
        return (
          <div className="space-y-6">
            <h2 className="text-xl font-semibold">Notification Settings</h2>
            <div className="bg-white p-6 rounded-lg shadow">
              <p className="text-gray-600">Notification preferences will be available soon.</p>
            </div>
          </div>
        )
      
      case 'security':
        return (
          <div className="space-y-6">
            <h2 className="text-xl font-semibold">Security Settings</h2>
            <div className="bg-white p-6 rounded-lg shadow">
              <p className="text-gray-600">Security settings will be available soon.</p>
            </div>
          </div>
        )
      
      default:
        return null
    }
  }

  return (
    <div className="max-w-6xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Settings</h1>
        <p className="mt-2 text-gray-600">
          Manage your account settings and preferences.
        </p>
      </div>

      <div className="flex space-x-8">
        {/* Settings Navigation */}
        <div className="w-64 flex-shrink-0">
          <nav className="bg-white rounded-lg shadow">
            <div className="p-4">
              <ul className="space-y-1">
                {settingsTabs.map((tab) => (
                  <li key={tab.id}>
                    <button
                      onClick={() => setActiveTab(tab.id)}
                      className={`w-full text-left px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                        activeTab === tab.id
                          ? 'bg-blue-100 text-blue-700'
                          : 'text-gray-700 hover:bg-gray-100'
                      }`}
                    >
                      <span className="mr-3">{tab.icon}</span>
                      {tab.name}
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          </nav>
        </div>

        {/* Settings Content */}
        <div className="flex-1">
          {renderTabContent()}
        </div>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/app/dashboard/student/page.tsx ---

'use client'

import { useSession } from 'next-auth/react'

export default function StudentDashboard() {
  const { data: session } = useSession()

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-foreground">Student Dashboard</h1>
        <p className="text-muted-foreground">
          Welcome back, {session?.user?.name}! Continue your learning journey.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Assigned Tests</h3>
          <p className="text-3xl font-bold text-primary">5</p>
          <p className="text-sm text-muted-foreground">Pending completion</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Completed Tests</h3>
          <p className="text-3xl font-bold text-green-600">12</p>
          <p className="text-sm text-muted-foreground">This month</p>
        </div>
        
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Average Score</h3>
          <p className="text-3xl font-bold text-blue-600">87%</p>
          <p className="text-sm text-muted-foreground">+5% improvement</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Upcoming Tests</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center p-3 bg-secondary rounded-md">
              <div>
                <span className="text-sm font-medium">Mathematics Quiz 2</span>
                <p className="text-xs text-muted-foreground">Due: Tomorrow</p>
              </div>
              <button className="text-xs bg-primary text-primary-foreground px-3 py-1 rounded">
                Start Test
              </button>
            </div>
            <div className="flex justify-between items-center p-3 bg-secondary rounded-md">
              <div>
                <span className="text-sm font-medium">Physics Chapter 4</span>
                <p className="text-xs text-muted-foreground">Due: 3 days</p>
              </div>
              <button className="text-xs bg-primary text-primary-foreground px-3 py-1 rounded">
                Start Test
              </button>
            </div>
            <div className="flex justify-between items-center p-3 bg-secondary rounded-md">
              <div>
                <span className="text-sm font-medium">Chemistry Lab Review</span>
                <p className="text-xs text-muted-foreground">Due: 1 week</p>
              </div>
              <button className="text-xs bg-secondary text-secondary-foreground px-3 py-1 rounded">
                View Details
              </button>
            </div>
          </div>
        </div>

        <div className="bg-card p-6 rounded-lg border">
          <h3 className="text-lg font-semibold text-card-foreground mb-4">Recent Results</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Mathematics Quiz 1</span>
                <p className="text-xs text-muted-foreground">Completed yesterday</p>
              </div>
              <span className="text-sm font-bold text-green-600">92%</span>
            </div>
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Physics Chapter 3</span>
                <p className="text-xs text-muted-foreground">Completed 3 days ago</p>
              </div>
              <span className="text-sm font-bold text-blue-600">85%</span>
            </div>
            <div className="flex justify-between items-center">
              <div>
                <span className="text-sm font-medium">Chemistry Basics</span>
                <p className="text-xs text-muted-foreground">Completed 1 week ago</p>
              </div>
              <span className="text-sm font-bold text-yellow-600">78%</span>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-card p-6 rounded-lg border">
        <h3 className="text-lg font-semibold text-card-foreground mb-4">Study Progress</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <div className="flex justify-between mb-2">
              <span className="text-sm">Mathematics</span>
              <span className="text-sm text-muted-foreground">85%</span>
            </div>
            <div className="w-full bg-secondary rounded-full h-2">
              <div className="bg-blue-600 h-2 rounded-full" style={{ width: '85%' }}></div>
            </div>
          </div>
          <div>
            <div className="flex justify-between mb-2">
              <span className="text-sm">Physics</span>
              <span className="text-sm text-muted-foreground">72%</span>
            </div>
            <div className="w-full bg-secondary rounded-full h-2">
              <div className="bg-green-600 h-2 rounded-full" style={{ width: '72%' }}></div>
            </div>
          </div>
          <div>
            <div className="flex justify-between mb-2">
              <span className="text-sm">Chemistry</span>
              <span className="text-sm text-muted-foreground">68%</span>
            </div>
            <div className="w-full bg-secondary rounded-full h-2">
              <div className="bg-yellow-600 h-2 rounded-full" style={{ width: '68%' }}></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/app/layout.tsx ---

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../globals.css";
import SessionProvider from "@/components/providers/SessionProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: {
    default: "EduTech Platform",
    template: "%s • EduTech",
  },
  description: "AI-powered educational technology platform",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="bg-background" style={{ colorScheme: "light" }}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased text-foreground selection:bg-primary/20 selection:text-foreground`}
      >
        <SessionProvider>
          {children}
        </SessionProvider>
      </body>
    </html>
  );
}


--- FILE: ./frontend/src/app/page.tsx ---

export default function Home() {
  return (
    <div className="min-h-screen bg-background">
      <main className="relative isolate">
        <section className="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 py-20 sm:py-28">
          <div className="text-center">
            <h1 className="text-4xl sm:text-5xl font-semibold tracking-tight text-foreground">
              EduTech Platform
            </h1>
            <p className="mt-3 text-base sm:text-lg text-muted-foreground">
              AI-powered educational technology platform
            </p>
            <div className="mt-10 grid gap-2 text-sm text-muted-foreground justify-center">
              <p>🚀 Frontend: Running on port 3000</p>
              <p>🐍 Backend: Running on port 8000</p>
              <p>🗄️ Hasura: Running on port 8081</p>
              <p>🐘 PostgreSQL: Running on port 5432</p>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
}

--- FILE: ./frontend/src/components/features/TelegramIntegration.tsx ---

'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'

interface TelegramLinkStatus {
  is_linked: boolean
  telegram_username?: string
  telegram_first_name?: string
  linked_at?: string
}

export default function TelegramIntegration() {
  const { data: session } = useSession()
  const [linkStatus, setLinkStatus] = useState<TelegramLinkStatus | null>(null)
  const [loading, setLoading] = useState(true)
  const [linkToken, setLinkToken] = useState('')
  const [isLinking, setIsLinking] = useState(false)
  const [message, setMessage] = useState<{ type: 'success' | 'error' | 'info'; text: string } | null>(null)

  // Fetch current Telegram link status
  const fetchLinkStatus = async () => {
    try {
      const response = await fetch('/api/telegram/status', {
        headers: {
          'Authorization': `Bearer ${session?.accessToken}`,
        },
      })
      
      if (response.ok) {
        const data = await response.json()
        setLinkStatus(data)
      }
    } catch (error) {
      console.error('Failed to fetch Telegram link status:', error)
    } finally {
      setLoading(false)
    }
  }

  // Link account with token
  const handleLinkAccount = async () => {
    if (!linkToken.trim()) {
      setMessage({ type: 'error', text: 'Please enter a valid token' })
      return
    }

    setIsLinking(true)
    setMessage(null)

    try {
      const response = await fetch('/api/telegram/link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session?.accessToken}`,
        },
        body: JSON.stringify({ token: linkToken }),
      })

      const data = await response.json()

      if (response.ok) {
        setMessage({ type: 'success', text: 'Telegram account linked successfully!' })
        setLinkToken('')
        await fetchLinkStatus() // Refresh status
      } else {
        setMessage({ type: 'error', text: data.detail || 'Failed to link account' })
      }
    } catch (error) {
      setMessage({ type: 'error', text: 'Network error. Please try again.' })
    } finally {
      setIsLinking(false)
    }
  }

  // Unlink account
  const handleUnlinkAccount = async () => {
    setIsLinking(true)
    setMessage(null)

    try {
      const response = await fetch('/api/telegram/unlink', {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${session?.accessToken}`,
        },
      })

      const data = await response.json()

      if (response.ok) {
        setMessage({ type: 'success', text: 'Telegram account unlinked successfully!' })
        await fetchLinkStatus() // Refresh status
      } else {
        setMessage({ type: 'error', text: data.detail || 'Failed to unlink account' })
      }
    } catch (error) {
      setMessage({ type: 'error', text: 'Network error. Please try again.' })
    } finally {
      setIsLinking(false)
    }
  }

  useEffect(() => {
    if (session) {
      fetchLinkStatus()
    }
  }, [session])

  if (loading) {
    return (
      <div className="space-y-6">
        <h2 className="text-xl font-semibold">Telegram Integration</h2>
        <div className="bg-white p-6 rounded-lg shadow">
          <div className="animate-pulse">Loading...</div>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Telegram Integration</h2>
      
      {/* Status Card */}
      <div className="bg-white p-6 rounded-lg shadow">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium">Telegram Account Status</h3>
          <div className={`px-3 py-1 rounded-full text-sm font-medium ${
            linkStatus?.is_linked 
              ? 'bg-green-100 text-green-800' 
              : 'bg-gray-100 text-gray-800'
          }`}>
            {linkStatus?.is_linked ? 'Connected' : 'Not Connected'}
          </div>
        </div>

        {linkStatus?.is_linked ? (
          <div className="space-y-4">
            <div className="bg-green-50 p-4 rounded-md">
              <div className="flex">
                <div className="flex-shrink-0">
                  <span className="text-green-400 text-xl">✅</span>
                </div>
                <div className="ml-3">
                  <h4 className="text-sm font-medium text-green-800">
                    Successfully Connected
                  </h4>
                  <div className="mt-2 text-sm text-green-700">
                    <p><strong>Username:</strong> @{linkStatus.telegram_username || 'N/A'}</p>
                    <p><strong>Name:</strong> {linkStatus.telegram_first_name || 'N/A'}</p>
                    <p><strong>Connected:</strong> {linkStatus.linked_at ? new Date(linkStatus.linked_at).toLocaleDateString() : 'N/A'}</p>
                  </div>
                </div>
              </div>
            </div>

            <div className="pt-4 border-t">
              <button
                onClick={handleUnlinkAccount}
                disabled={isLinking}
                className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLinking ? 'Unlinking...' : 'Unlink Account'}
              </button>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="bg-blue-50 p-4 rounded-md">
              <div className="flex">
                <div className="flex-shrink-0">
                  <span className="text-blue-400 text-xl">📱</span>
                </div>
                <div className="ml-3">
                  <h4 className="text-sm font-medium text-blue-800">
                    Connect Your Telegram Account
                  </h4>
                  <div className="mt-2 text-sm text-blue-700">
                    <p>Link your Telegram account to take tests directly from Telegram!</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Instructions */}
            <div className="bg-gray-50 p-4 rounded-md">
              <h4 className="text-sm font-medium text-gray-800 mb-2">How to link your account:</h4>
              <ol className="text-sm text-gray-700 space-y-1 list-decimal list-inside">
                <li>Open Telegram and search for <strong>@yeebitz_bot</strong></li>
                <li>Send <code className="bg-gray-200 px-1 rounded">/start</code> to the bot</li>
                <li>Send <code className="bg-gray-200 px-1 rounded">/link</code> to get your linking token</li>
                <li>Copy the token and paste it below</li>
                <li>Click "Link Account" to complete the process</li>
              </ol>
            </div>

            {/* Token Input */}
            <div className="space-y-3">
              <label htmlFor="linkToken" className="block text-sm font-medium text-gray-700">
                Telegram Link Token
              </label>
              <input
                type="text"
                id="linkToken"
                value={linkToken}
                onChange={(e) => setLinkToken(e.target.value)}
                placeholder="Enter your token from @yeebitz_bot"
                className="block w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-blue-500 focus:border-blue-500"
              />
              <button
                onClick={handleLinkAccount}
                disabled={isLinking || !linkToken.trim()}
                className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLinking ? 'Linking...' : 'Link Account'}
              </button>
            </div>
          </div>
        )}

        {/* Message Display */}
        {message && (
          <div className={`mt-4 p-4 rounded-md ${
            message.type === 'success' ? 'bg-green-50 text-green-800' :
            message.type === 'error' ? 'bg-red-50 text-red-800' :
            'bg-blue-50 text-blue-800'
          }`}>
            {message.text}
          </div>
        )}
      </div>

      {/* Benefits Card */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h3 className="text-lg font-medium mb-4">Benefits of Telegram Integration</h3>
        <ul className="space-y-2 text-sm text-gray-700">
          <li className="flex items-center">
            <span className="text-green-500 mr-2">✓</span>
            Take tests directly from Telegram
          </li>
          <li className="flex items-center">
            <span className="text-green-500 mr-2">✓</span>
            Receive instant notifications about new tests
          </li>
          <li className="flex items-center">
            <span className="text-green-500 mr-2">✓</span>
            View your results and progress
          </li>
          <li className="flex items-center">
            <span className="text-green-500 mr-2">✓</span>
            Access study materials on the go
          </li>
        </ul>
      </div>
    </div>
  )
}

--- FILE: ./frontend/src/components/index.ts ---



--- FILE: ./frontend/src/components/layouts/DashboardLayout.tsx ---

'use client'

import SessionProvider from '../providers/SessionProvider'
import Header from './Header'
import SideNav from './SideNav'
import Footer from './Footer'

interface DashboardLayoutProps {
  children: React.ReactNode
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  return (
    <SessionProvider>
      <div className="min-h-screen bg-background flex flex-col">
        <Header />
        <div className="flex flex-1">
          <SideNav />
          <main className="flex-1 p-6 lg:p-8">
            <div className="mx-auto max-w-6xl">
              {children}
            </div>
          </main>
        </div>
        <Footer />
      </div>
    </SessionProvider>
  )
}

--- FILE: ./frontend/src/components/layouts/Footer.tsx ---

export default function Footer() {
  return (
    <footer className="mt-auto border-t bg-background/60 backdrop-blur">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div className="flex items-center justify-between">
          <div className="text-sm text-muted-foreground">
            © 2024 EduTech Platform
          </div>
          <div className="flex items-center gap-4 text-sm text-muted-foreground">
            <span>Privacy</span>
            <span>Terms</span>
            <span>Support</span>
          </div>
        </div>
      </div>
    </footer>
  )
}

--- FILE: ./frontend/src/components/layouts/Header.tsx ---

'use client'

import { signOut, useSession } from 'next-auth/react'
import Link from 'next/link'

export default function Header() {
  const { data: session } = useSession()

  return (
    <header className="bg-background/80 backdrop-blur border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex h-14 items-center justify-between">
          <div className="flex items-center gap-3">
            <Link href="/dashboard" className="text-base font-semibold tracking-tight text-foreground">
              EduTech
            </Link>
          </div>

          <nav className="hidden md:flex items-center gap-2">
            <Link
              href="/dashboard"
              className="px-3 py-1.5 rounded-md text-sm font-medium text-foreground hover:bg-secondary hover:text-secondary-foreground"
            >
              Dashboard
            </Link>
            {session?.user?.role === 'admin' && (
              <Link
                href="/dashboard/admin"
                className="px-3 py-1.5 rounded-md text-sm font-medium text-foreground hover:bg-secondary hover:text-secondary-foreground"
              >
                Admin
              </Link>
            )}
            {(session?.user?.role === 'admin' || session?.user?.role === 'instructor') && (
              <Link
                href="/dashboard/instructor"
                className="px-3 py-1.5 rounded-md text-sm font-medium text-foreground hover:bg-secondary hover:text-secondary-foreground"
              >
                Instructor
              </Link>
            )}
            <Link
              href="/dashboard/student"
              className="px-3 py-1.5 rounded-md text-sm font-medium text-foreground hover:bg-secondary hover:text-secondary-foreground"
            >
              Student
            </Link>
          </nav>

          <div className="flex items-center gap-3">
            {session?.user && (
              <>
                <span className="text-sm text-muted-foreground truncate max-w-[180px]">
                  {session.user.name} ({session.user.role})
                </span>
                <button
                  onClick={() => signOut()}
                  className="inline-flex items-center justify-center rounded-md bg-primary px-3 py-1.5 text-sm font-medium text-primary-foreground shadow-sm hover:bg-primary/90"
                >
                  Sign out
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    </header>
  )
}

--- FILE: ./frontend/src/components/layouts/SideNav.tsx ---

'use client'

import { useSession } from 'next-auth/react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { hasPermission, type Role } from '@/lib/rbac'

interface NavItem {
  name: string
  href: string
  resource?: string
  action?: string
}

const getNavItems = (role: Role): NavItem[] => {
  const baseItems: NavItem[] = [
    { name: 'Dashboard', href: '/dashboard' },
  ]
  
  const settingsItem: NavItem[] = [
    { name: 'Settings', href: '/dashboard/settings' },
  ]

  if (role === 'admin') {
    return [
      ...baseItems,
      { name: 'Users', href: '/dashboard/admin/users', resource: 'user', action: 'read' },
      { name: 'Documents', href: '/dashboard/admin/documents', resource: 'document', action: 'read' },
      { name: 'Questions', href: '/dashboard/admin/questions', resource: 'question', action: 'read' },
      { name: 'Tests', href: '/dashboard/admin/tests', resource: 'test', action: 'read' },
      { name: 'Results', href: '/dashboard/admin/results', resource: 'result', action: 'read_all' },
      ...settingsItem,
    ]
  }

  if (role === 'instructor') {
    return [
      ...baseItems,
      { name: 'Documents', href: '/dashboard/instructor/documents', resource: 'document', action: 'read' },
      { name: 'Questions', href: '/dashboard/instructor/questions', resource: 'question', action: 'read' },
      { name: 'Tests', href: '/dashboard/instructor/tests', resource: 'test', action: 'read' },
      { name: 'Results', href: '/dashboard/instructor/results', resource: 'result', action: 'read_all' },
      ...settingsItem,
    ]
  }

  return [
    ...baseItems,
    { name: 'My Tests', href: '/dashboard/student/tests', resource: 'test', action: 'read' },
    { name: 'My Results', href: '/dashboard/student/results', resource: 'result', action: 'read' },
    { name: 'Leaderboard', href: '/dashboard/student/leaderboard' },
    ...settingsItem,
  ]
}

export default function SideNav() {
  const { data: session } = useSession()
  const pathname = usePathname()

  if (!session?.user?.role) {
    return null
  }

  const navItems = getNavItems(session.user.role as Role)
  const userRole = session.user.role as Role

  return (
    <nav className="bg-background border-r w-60 min-h-screen">
      <div className="p-3">
        <ul className="space-y-1.5">
          {navItems.map((item) => {
            // Check permissions if resource and action are specified
            if (item.resource && item.action && !hasPermission(userRole, item.resource, item.action)) {
              return null
            }

            const isActive = pathname === item.href || pathname.startsWith(item.href + '/')

            return (
              <li key={item.name}>
                <Link
                  href={item.href}
                  className={`block px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                    isActive
                      ? 'bg-secondary text-foreground'
                      : 'text-foreground hover:bg-secondary hover:text-secondary-foreground'
                  }`}
                >
                  {item.name}
                </Link>
              </li>
            )
          })}
        </ul>
      </div>
    </nav>
  )
}

--- FILE: ./frontend/src/components/providers/SessionProvider.tsx ---

'use client'

import { SessionProvider as NextAuthSessionProvider } from 'next-auth/react'
import { ReactNode } from 'react'

interface SessionProviderProps {
  children: ReactNode
}

export default function SessionProvider({ children }: SessionProviderProps) {
  return (
    <NextAuthSessionProvider>
      {children}
    </NextAuthSessionProvider>
  )
}

--- FILE: ./frontend/src/globals.css ---

@import "tailwindcss";

@theme {
  /* Light mode, refined neutrals */
  --color-background: oklch(0.99 0 0);
  --color-foreground: oklch(0.27 0 260);
  --color-card: oklch(1 0 0);
  --color-card-foreground: oklch(0.27 0 260);
  --color-popover: oklch(1 0 0);
  --color-popover-foreground: oklch(0.27 0 260);

  /* Primary inspired by clean system blue */
  --color-primary: oklch(0.67 0.16 255);
  --color-primary-foreground: oklch(0.98 0.01 262);

  /* Subtle surfaces */
  --color-secondary: oklch(0.97 0 260);
  --color-secondary-foreground: oklch(0.27 0 260);
  --color-muted: oklch(0.97 0 260);
  --color-muted-foreground: oklch(0.55 0 260);
  --color-accent: oklch(0.98 0 260);
  --color-accent-foreground: oklch(0.27 0 260);

  --color-destructive: oklch(0.64 0.25 25);
  --color-destructive-foreground: oklch(0.99 0 260);

  --color-border: oklch(0.93 0 260);
  --color-input: oklch(0.93 0 260);
  --color-ring: oklch(0.67 0.16 255);

  /* Softer global radius */
  --radius: 0.75rem;
}

/* Force light mode only */

* {
  border-color: var(--color-border);
}

body {
  background-color: var(--color-background);
  color: var(--color-foreground);
}

/* Baseline typography smoothing */
html {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

--- FILE: ./frontend/src/lib/auth.ts ---

import NextAuth from "next-auth"
import Credentials from "next-auth/providers/credentials"
import { compare } from "bcryptjs"
import jwt from "jsonwebtoken" // Import the library

export const { auth, signIn, signOut, handlers } = NextAuth({
  secret: process.env.NEXTAUTH_SECRET,
  basePath: '/api/auth',
  providers: [
    Credentials({
      // ... (authorize function remains the same)
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        try {
          // Query user from Hasura
          const response = await fetch(process.env.NEXT_PUBLIC_HASURA_GRAPHQL_URL!, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-hasura-admin-secret': process.env.HASURA_GRAPHQL_ADMIN_SECRET!,
            },
            body: JSON.stringify({
              query: `
                query GetUser($email: String!) {
                  users(where: {email: {_eq: $email}}) {
                    id
                    email
                    full_name
                    password_hash
                    role
                    is_active
                    email_verified
                  }
                }
              `,
              variables: { email: credentials.email }
            })
          })

          const { data } = await response.json()
          const user = data?.users?.[0]

          if (!user || !user.is_active) {
            return null
          }

          // Verify password
          const isValidPassword = await compare(credentials.password as string, user.password_hash)
          
          if (!isValidPassword) {
            return null
          }

          return {
            id: user.id,
            email: user.email,
            name: user.full_name,
            role: user.role,
            emailVerified: user.email_verified
          }
        } catch (error) {
          console.error('Auth error:', error)
          return null
        }
      }
    })
  ],
  pages: {
    signIn: '/login',
    signUp: '/signup'
  },
  callbacks: {
    jwt: async ({ token, user }) => {
      if (user) {
        token.role = user.role
        token.id = user.id
      }
      return token
    },
    session: async ({ session, token }) => {
      if (token && session.user) {
        session.user.id = token.id as string
        session.user.role = token.role as string

        // --- ADD THIS BLOCK ---
        // Create a payload that the backend will understand
        const payload = {
          sub: token.id, // 'sub' is the standard claim for subject (user ID)
        };
        
        // Sign the token with the same secret your backend uses
        const accessToken = jwt.sign(payload, process.env.BACKEND_SECRET_KEY!, {
          algorithm: 'HS256', // Must match your backend's algorithm
        });
        
        // Add the signed token to the session object
        (session as any).accessToken = accessToken;
        // --- END OF BLOCK ---
      }
      return session
    }
  },
  session: {
    strategy: "jwt"
  }
})

--- FILE: ./frontend/src/lib/index.ts ---



--- FILE: ./frontend/src/lib/rbac.ts ---

export type Role = 'admin' | 'instructor' | 'student'

export interface Permission {
  resource: string
  action: string
}

export const ROLE_PERMISSIONS: Record<Role, Permission[]> = {
  admin: [
    { resource: 'user', action: 'create' },
    { resource: 'user', action: 'read' },
    { resource: 'user', action: 'update' },
    { resource: 'user', action: 'delete' },
    { resource: 'document', action: 'create' },
    { resource: 'document', action: 'read' },
    { resource: 'document', action: 'delete' },
    { resource: 'question', action: 'create' },
    { resource: 'question', action: 'read' },
    { resource: 'question', action: 'update' },
    { resource: 'question', action: 'delete' },
    { resource: 'test', action: 'create' },
    { resource: 'test', action: 'read' },
    { resource: 'test', action: 'update' },
    { resource: 'test', action: 'delete' },
    { resource: 'test', action: 'assign' },
    { resource: 'result', action: 'read_all' },
  ],
  instructor: [
    { resource: 'document', action: 'create' },
    { resource: 'document', action: 'read' },
    { resource: 'question', action: 'create' },
    { resource: 'question', action: 'read' },
    { resource: 'question', action: 'update' },
    { resource: 'question', action: 'delete' },
    { resource: 'test', action: 'create' },
    { resource: 'test', action: 'read' },
    { resource: 'test', action: 'update' },
    { resource: 'test', action: 'delete' },
    { resource: 'test', action: 'assign' },
    { resource: 'result', action: 'read_all' },
  ],
  student: [
    { resource: 'test', action: 'read' },
    { resource: 'result', action: 'read' },
  ]
}

export const ROLE_ROUTES: Record<Role, string[]> = {
  admin: ['/dashboard/admin', '/dashboard/instructor', '/dashboard/student', '/dashboard/settings'],
  instructor: ['/dashboard/instructor', '/dashboard/settings'],
  student: ['/dashboard/student', '/dashboard/settings']
}

export function hasPermission(userRole: Role, resource: string, action: string): boolean {
  const permissions = ROLE_PERMISSIONS[userRole] || []
  return permissions.some(p => p.resource === resource && p.action === action)
}

export function canAccessRoute(userRole: Role, route: string): boolean {
  const allowedRoutes = ROLE_ROUTES[userRole] || []
  return allowedRoutes.some(allowedRoute => route.startsWith(allowedRoute))
}

export function getDefaultRoute(userRole: Role): string {
  switch (userRole) {
    case 'admin':
      return '/dashboard/admin'
    case 'instructor':
      return '/dashboard/instructor'
    case 'student':
      return '/dashboard/student'
    default:
      return '/dashboard/student'
  }
}

--- FILE: ./frontend/src/middleware.ts ---

import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { getToken } from 'next-auth/jwt'
import { canAccessRoute, getDefaultRoute, type Role } from './lib/rbac'

export async function middleware(request: NextRequest) {
  const token = await getToken({ 
    req: request,
    secret: process.env.NEXTAUTH_SECRET 
  })
  const pathname = request.nextUrl.pathname

  // Public routes that don't require authentication
  const publicRoutes = ['/login', '/signup', '/']
  const isPublicRoute = publicRoutes.includes(pathname)

  // Protected routes that require authentication (exclude auth API routes)
  const isProtectedRoute = pathname.startsWith('/dashboard') || (pathname.startsWith('/api') && !pathname.startsWith('/api/auth'))

  // If user is not authenticated and trying to access protected route
  if (!token && isProtectedRoute) {
    return NextResponse.redirect(new URL('/login', request.url))
  }

  // If user is authenticated and trying to access auth pages, redirect to dashboard
  if (token && (pathname === '/login' || pathname === '/signup')) {
    const userRole = token.role as Role
    const defaultRoute = getDefaultRoute(userRole)
    return NextResponse.redirect(new URL(defaultRoute, request.url))
  }

  // Handle dashboard route without specific role path
  if (token && pathname === '/dashboard') {
    const userRole = token.role as Role
    const defaultRoute = getDefaultRoute(userRole)
    return NextResponse.redirect(new URL(defaultRoute, request.url))
  }

  // Check role-based access for dashboard routes
  if (token && pathname.startsWith('/dashboard/')) {
    const userRole = token.role as Role
    
    if (!canAccessRoute(userRole, pathname)) {
      const defaultRoute = getDefaultRoute(userRole)
      return NextResponse.redirect(new URL(defaultRoute, request.url))
    }
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.png$).*)',
  ],
}

--- FILE: ./frontend/src/types/index.ts ---



--- FILE: ./frontend/src/types/next-auth.d.ts ---

import { DefaultSession } from "next-auth"

declare module "next-auth" {
  interface Session {
    user: {
      id: string
      role: string
    } & DefaultSession["user"]
  }

  interface User {
    role: string
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    role: string
    id: string
  }
}

--- FILE: ./frontend/tsconfig.json ---

{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- FILE: ./shared/types/index.ts ---

// User Types
export enum UserRole {
  ADMIN = 'admin',
  INSTRUCTOR = 'instructor',
  STUDENT = 'student',
}

export interface User {
  id: string;
  email: string;
  fullName: string;
  role: UserRole;
  isActive: boolean;
  emailVerified: boolean;
  createdAt: string;
  updatedAt: string;
}

// Document Types
export enum DocumentStatus {
  UPLOADED = 'uploaded',
  PROCESSING = 'processing',
  PROCESSED = 'processed',
  FAILED = 'failed',
}

export interface Document {
  id: string;
  uploadedBy: string;
  originalFilename: string;
  filePath: string;
  fileSize: number;
  mimeType: string;
  status: DocumentStatus;
  metadata: Record<string, any>;
  createdAt: string;
  processedAt?: string;
}

// Question Types
export interface Question {
  id: string;
  documentId?: string;
  createdBy: string;
  questionText: string;
  questionType: string;
  options: string[];
  correctAnswer: string;
  explanation?: string;
  difficulty: 'easy' | 'medium' | 'hard';
  tags: string[];
  createdAt: string;
  updatedAt: string;
}

// Test Types
export enum TestStatus {
  DRAFT = 'draft',
  PUBLISHED = 'published',
  ARCHIVED = 'archived',
}

export interface Test {
  id: string;
  createdBy: string;
  title: string;
  description?: string;
  status: TestStatus;
  durationMinutes?: number;
  totalMarks: number;
  passingMarks: number;
  metadata: Record<string, any>;
  createdAt: string;
  updatedAt: string;
  publishedAt?: string;
}

// Result Types
export interface Result {
  id: string;
  testId: string;
  userId: string;
  score: number;
  totalMarks: number;
  percentage: number;
  timeTakenSeconds: number;
  answers: Record<string, any>;
  submittedAt: string;
}

// API Response Types
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
}
    

--- FILE: ./shared/types/package.json ---

{
  "name": "@edutech/shared",
  "version": "1.0.0",
  "main": "types/index.ts",
  "types": "types/index.ts"
}

--- FILE: ./test_bot.py ---

#!/usr/bin/env python3
"""
Simple test to verify Telegram bot can connect
"""
import asyncio
from telegram import Bot
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

async def test_bot():
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("❌ TELEGRAM_BOT_TOKEN not found in environment")
        return False
    
    try:
        bot = Bot(token=token)
        me = await bot.get_me()
        print(f"✅ Bot connected successfully!")
        print(f"   Bot name: {me.first_name}")
        print(f"   Bot username: @{me.username}")
        print(f"   Bot ID: {me.id}")
        return True
    except Exception as e:
        print(f"❌ Failed to connect to bot: {str(e)}")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_bot())
    exit(0 if success else 1)

--- FILE: ./test_bot_with_logs.py ---

#!/usr/bin/env python3
"""
Test Telegram bot with comprehensive logging
"""
import asyncio
import logging
import sys
from pathlib import Path

# Add src to path
backend_dir = Path(__file__).parent / "backend"
src_dir = backend_dir / "src"
sys.path.insert(0, str(src_dir))

# Change to backend directory for .env loading
import os
os.chdir(backend_dir)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log')
    ]
)

# Set specific log levels
logging.getLogger('telegram').setLevel(logging.INFO)
logging.getLogger('httpx').setLevel(logging.WARNING)  # Reduce HTTP noise

async def main():
    """Start bot with logging"""
    print("🤖 Starting EduTech Telegram Bot with Logging")
    print("=" * 50)
    
    try:
        # Import and initialize
        from main import app
        from services.telegram_bot import telegram_bot
        from utils.database import init_database, async_session_factory
        
        # Initialize database
        init_database()
        
        # Initialize bot
        await telegram_bot.initialize(async_session_factory)
        
        if not telegram_bot.application:
            print("❌ Bot failed to initialize")
            return
            
        print("✅ Bot initialized successfully")
        print(f"📱 Bot username: @yeebitz_bot")
        print(f"📝 Logs saved to: {backend_dir}/bot.log")
        print("\n🔍 Live Bot Activity:")
        print("-" * 30)
        
        # Start polling
        await telegram_bot.start_polling()
        
    except KeyboardInterrupt:
        print("\n⏹️  Bot stopped by user")
    except Exception as e:
        print(f"❌ Error: {str(e)}")
        logging.error(f"Bot error: {str(e)}", exc_info=True)
    finally:
        if 'telegram_bot' in locals():
            await telegram_bot.stop()

if __name__ == "__main__":
    asyncio.run(main())

--- FILE: ./test_production.py ---

#!/usr/bin/env python3
"""
Production readiness test for EduTech Platform API
"""
import asyncio
import sys
import os
from pathlib import Path

# Add src to path
backend_dir = Path(__file__).parent / "backend"
src_dir = backend_dir / "src"
sys.path.insert(0, str(src_dir))

# Change to backend directory for .env loading
os.chdir(backend_dir)

async def test_production_setup():
    """Test production setup components"""
    print("🧪 Testing EduTech Platform Production Setup")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 0
    
    # Test 1: Import main application
    total_tests += 1
    try:
        from main import app
        print("✅ 1. Application imports successfully")
        tests_passed += 1
    except Exception as e:
        print(f"❌ 1. Application import failed: {str(e)}")
    
    # Test 2: Test configuration loading
    total_tests += 1
    try:
        from core.config import settings
        print(f"✅ 2. Configuration loaded (Environment: {settings.ENVIRONMENT})")
        tests_passed += 1
    except Exception as e:
        print(f"❌ 2. Configuration loading failed: {str(e)}")
    
    # Test 3: Test database utilities
    total_tests += 1
    try:
        from utils.database import init_database, async_session_factory
        init_database()
        print("✅ 3. Database initialization successful")
        tests_passed += 1
    except Exception as e:
        print(f"❌ 3. Database initialization failed: {str(e)}")
    
    # Test 4: Test Telegram bot service
    total_tests += 1
    try:
        from services.telegram_bot import TelegramBotService
        bot = TelegramBotService()
        print("✅ 4. Telegram bot service created")
        tests_passed += 1
    except Exception as e:
        print(f"❌ 4. Telegram bot service failed: {str(e)}")
    
    # Test 5: Test API routes
    total_tests += 1
    try:
        from api.telegram import router
        print("✅ 5. API routes loaded successfully")
        tests_passed += 1
    except Exception as e:
        print(f"❌ 5. API routes loading failed: {str(e)}")
    
    # Test 6: Test middleware
    total_tests += 1
    try:
        from middleware.error_handler import global_exception_handler
        print("✅ 6. Error handling middleware loaded")
        tests_passed += 1
    except Exception as e:
        print(f"❌ 6. Middleware loading failed: {str(e)}")
    
    # Test 7: Test models
    total_tests += 1
    try:
        from models.user import User
        from models.telegram import TelegramUser
        print("✅ 7. Database models loaded")
        tests_passed += 1
    except Exception as e:
        print(f"❌ 7. Models loading failed: {str(e)}")
    
    # Test 8: Test database connection
    total_tests += 1
    try:
        from utils.database import async_session_factory
        from sqlalchemy import text
        if async_session_factory:
            async with async_session_factory() as session:
                result = await session.execute(text("SELECT 1"))
                result.scalar()
            print("✅ 8. Database connection successful")
            tests_passed += 1
        else:
            print("❌ 8. Database session factory not initialized")
    except Exception as e:
        print(f"❌ 8. Database connection failed: {str(e)}")
    
    print("\n" + "=" * 50)
    print(f"📊 Test Results: {tests_passed}/{total_tests} tests passed")
    
    if tests_passed == total_tests:
        print("🎉 All tests passed! Production setup is ready.")
        return True
    else:
        print("⚠️  Some tests failed. Please check the issues above.")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_production_setup())
    sys.exit(0 if success else 1)